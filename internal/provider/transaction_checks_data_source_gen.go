// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func TransactionChecksDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"checks": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"active": schema.BoolAttribute{
							Computed:            true,
							Description:         "Check status: active or inactive",
							MarkdownDescription: "Check status: active or inactive",
						},
						"created_at": schema.Int64Attribute{
							Computed:            true,
							Description:         "Timestamp when the check was created",
							MarkdownDescription: "Timestamp when the check was created",
						},
						"id": schema.Int64Attribute{
							Computed:            true,
							Description:         "Id of the check",
							MarkdownDescription: "Id of the check",
						},
						"interval": schema.Int64Attribute{
							Computed:            true,
							Description:         "TMS test intervals in minutes. Allowed intervals: 5,10,20,60,720,1440. The interval you're allowed to set may vary depending on your current plan.",
							MarkdownDescription: "TMS test intervals in minutes. Allowed intervals: 5,10,20,60,720,1440. The interval you're allowed to set may vary depending on your current plan.",
						},
						"last_downtime_end": schema.Int64Attribute{
							Computed:            true,
							Description:         "Timestamp when the last downtime ended. This field is optional",
							MarkdownDescription: "Timestamp when the last downtime ended. This field is optional",
						},
						"last_downtime_start": schema.Int64Attribute{
							Computed:            true,
							Description:         "Timestamp when the last downtime started. This field is optional",
							MarkdownDescription: "Timestamp when the last downtime started. This field is optional",
						},
						"modified_at": schema.Int64Attribute{
							Computed:            true,
							Description:         "Timestamp when the check was modified",
							MarkdownDescription: "Timestamp when the check was modified",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "Name of the check",
							MarkdownDescription: "Name of the check",
						},
						"region": schema.StringAttribute{
							Computed:            true,
							Description:         "Name of the region where the check is executed. Supported regions: us-east, us-west, eu, au",
							MarkdownDescription: "Name of the region where the check is executed. Supported regions: us-east, us-west, eu, au",
						},
						"status": schema.StringAttribute{
							Computed:            true,
							Description:         "Whether the check is passing or failing at the moment (successful, failing, unknown)",
							MarkdownDescription: "Whether the check is passing or failing at the moment (successful, failing, unknown)",
						},
						"tags": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "List of tags for a check. The tag name may contain the characters 'A-Z', 'a-z', '0-9', '_' and '-'. The maximum length of a tag is 64 characters.",
							MarkdownDescription: "List of tags for a check. The tag name may contain the characters 'A-Z', 'a-z', '0-9', '_' and '-'. The maximum length of a tag is 64 characters.",
						},
						"type": schema.StringAttribute{
							Computed:            true,
							Description:         "Type of transaction check: \"script\" for regular TMS checks and \"recording\" for checks made using the Transaction Recorder",
							MarkdownDescription: "Type of transaction check: \"script\" for regular TMS checks and \"recording\" for checks made using the Transaction Recorder",
						},
					},
					CustomType: ChecksType{
						ObjectType: types.ObjectType{
							AttrTypes: ChecksValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"extended_tags": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies whether to return an extended tags representation in the response (with type and count).",
				MarkdownDescription: "Specifies whether to return an extended tags representation in the response (with type and count).",
			},
			"limit": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Limit of returned checks",
				MarkdownDescription: "Limit of returned checks",
			},
			"offset": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Offset of returned checks",
				MarkdownDescription: "Offset of returned checks",
			},
			"tags": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "Tag list separated by commas. As an example \"nginx,apache\" would filter out all responses except those tagged nginx or apache",
				MarkdownDescription: "Tag list separated by commas. As an example \"nginx,apache\" would filter out all responses except those tagged nginx or apache",
			},
			"type": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Filter to return only checks of a given type (a TMS `script` or a WPM `recording`). If not provided, all checks are returned.",
				MarkdownDescription: "Filter to return only checks of a given type (a TMS `script` or a WPM `recording`). If not provided, all checks are returned.",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"script",
						"recording",
					),
				},
			},
		},
	}
}

type TransactionChecksModel struct {
	Checks       types.List   `tfsdk:"checks"`
	ExtendedTags types.Bool   `tfsdk:"extended_tags"`
	Limit        types.String `tfsdk:"limit"`
	Offset       types.String `tfsdk:"offset"`
	Tags         types.List   `tfsdk:"tags"`
	Type         types.String `tfsdk:"type"`
}

var _ basetypes.ObjectTypable = ChecksType{}

type ChecksType struct {
	basetypes.ObjectType
}

func (t ChecksType) Equal(o attr.Type) bool {
	other, ok := o.(ChecksType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ChecksType) String() string {
	return "ChecksType"
}

func (t ChecksType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	activeAttribute, ok := attributes["active"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`active is missing from object`)

		return nil, diags
	}

	activeVal, ok := activeAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`active expected to be basetypes.BoolValue, was: %T`, activeAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.Int64Value, was: %T`, createdAtAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	intervalAttribute, ok := attributes["interval"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interval is missing from object`)

		return nil, diags
	}

	intervalVal, ok := intervalAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interval expected to be basetypes.Int64Value, was: %T`, intervalAttribute))
	}

	lastDowntimeEndAttribute, ok := attributes["last_downtime_end"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_downtime_end is missing from object`)

		return nil, diags
	}

	lastDowntimeEndVal, ok := lastDowntimeEndAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_downtime_end expected to be basetypes.Int64Value, was: %T`, lastDowntimeEndAttribute))
	}

	lastDowntimeStartAttribute, ok := attributes["last_downtime_start"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_downtime_start is missing from object`)

		return nil, diags
	}

	lastDowntimeStartVal, ok := lastDowntimeStartAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_downtime_start expected to be basetypes.Int64Value, was: %T`, lastDowntimeStartAttribute))
	}

	modifiedAtAttribute, ok := attributes["modified_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_at is missing from object`)

		return nil, diags
	}

	modifiedAtVal, ok := modifiedAtAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_at expected to be basetypes.Int64Value, was: %T`, modifiedAtAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	regionAttribute, ok := attributes["region"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region is missing from object`)

		return nil, diags
	}

	regionVal, ok := regionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region expected to be basetypes.StringValue, was: %T`, regionAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return nil, diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	tagsAttribute, ok := attributes["tags"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tags is missing from object`)

		return nil, diags
	}

	tagsVal, ok := tagsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tags expected to be basetypes.ListValue, was: %T`, tagsAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ChecksValue{
		Active:            activeVal,
		CreatedAt:         createdAtVal,
		Id:                idVal,
		Interval:          intervalVal,
		LastDowntimeEnd:   lastDowntimeEndVal,
		LastDowntimeStart: lastDowntimeStartVal,
		ModifiedAt:        modifiedAtVal,
		Name:              nameVal,
		Region:            regionVal,
		Status:            statusVal,
		Tags:              tagsVal,
		ChecksType:        typeVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewChecksValueNull() ChecksValue {
	return ChecksValue{
		state: attr.ValueStateNull,
	}
}

func NewChecksValueUnknown() ChecksValue {
	return ChecksValue{
		state: attr.ValueStateUnknown,
	}
}

func NewChecksValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ChecksValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ChecksValue Attribute Value",
				"While creating a ChecksValue value, a missing attribute value was detected. "+
					"A ChecksValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ChecksValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ChecksValue Attribute Type",
				"While creating a ChecksValue value, an invalid attribute value was detected. "+
					"A ChecksValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ChecksValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ChecksValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ChecksValue Attribute Value",
				"While creating a ChecksValue value, an extra attribute value was detected. "+
					"A ChecksValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ChecksValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewChecksValueUnknown(), diags
	}

	activeAttribute, ok := attributes["active"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`active is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	activeVal, ok := activeAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`active expected to be basetypes.BoolValue, was: %T`, activeAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.Int64Value, was: %T`, createdAtAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	intervalAttribute, ok := attributes["interval"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interval is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	intervalVal, ok := intervalAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interval expected to be basetypes.Int64Value, was: %T`, intervalAttribute))
	}

	lastDowntimeEndAttribute, ok := attributes["last_downtime_end"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_downtime_end is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	lastDowntimeEndVal, ok := lastDowntimeEndAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_downtime_end expected to be basetypes.Int64Value, was: %T`, lastDowntimeEndAttribute))
	}

	lastDowntimeStartAttribute, ok := attributes["last_downtime_start"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_downtime_start is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	lastDowntimeStartVal, ok := lastDowntimeStartAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_downtime_start expected to be basetypes.Int64Value, was: %T`, lastDowntimeStartAttribute))
	}

	modifiedAtAttribute, ok := attributes["modified_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_at is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	modifiedAtVal, ok := modifiedAtAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_at expected to be basetypes.Int64Value, was: %T`, modifiedAtAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	regionAttribute, ok := attributes["region"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	regionVal, ok := regionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region expected to be basetypes.StringValue, was: %T`, regionAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	tagsAttribute, ok := attributes["tags"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tags is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	tagsVal, ok := tagsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tags expected to be basetypes.ListValue, was: %T`, tagsAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewChecksValueUnknown(), diags
	}

	return ChecksValue{
		Active:            activeVal,
		CreatedAt:         createdAtVal,
		Id:                idVal,
		Interval:          intervalVal,
		LastDowntimeEnd:   lastDowntimeEndVal,
		LastDowntimeStart: lastDowntimeStartVal,
		ModifiedAt:        modifiedAtVal,
		Name:              nameVal,
		Region:            regionVal,
		Status:            statusVal,
		Tags:              tagsVal,
		ChecksType:        typeVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewChecksValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ChecksValue {
	object, diags := NewChecksValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewChecksValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ChecksType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewChecksValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewChecksValueUnknown(), nil
	}

	if in.IsNull() {
		return NewChecksValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewChecksValueMust(ChecksValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ChecksType) ValueType(ctx context.Context) attr.Value {
	return ChecksValue{}
}

var _ basetypes.ObjectValuable = ChecksValue{}

type ChecksValue struct {
	Active            basetypes.BoolValue   `tfsdk:"active"`
	CreatedAt         basetypes.Int64Value  `tfsdk:"created_at"`
	Id                basetypes.Int64Value  `tfsdk:"id"`
	Interval          basetypes.Int64Value  `tfsdk:"interval"`
	LastDowntimeEnd   basetypes.Int64Value  `tfsdk:"last_downtime_end"`
	LastDowntimeStart basetypes.Int64Value  `tfsdk:"last_downtime_start"`
	ModifiedAt        basetypes.Int64Value  `tfsdk:"modified_at"`
	Name              basetypes.StringValue `tfsdk:"name"`
	Region            basetypes.StringValue `tfsdk:"region"`
	Status            basetypes.StringValue `tfsdk:"status"`
	Tags              basetypes.ListValue   `tfsdk:"tags"`
	ChecksType        basetypes.StringValue `tfsdk:"type"`
	state             attr.ValueState
}

func (v ChecksValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 12)

	var val tftypes.Value
	var err error

	attrTypes["active"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["created_at"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["interval"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["last_downtime_end"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["last_downtime_start"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["modified_at"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["region"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tags"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 12)

		val, err = v.Active.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["active"] = val

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Interval.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["interval"] = val

		val, err = v.LastDowntimeEnd.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["last_downtime_end"] = val

		val, err = v.LastDowntimeStart.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["last_downtime_start"] = val

		val, err = v.ModifiedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["modified_at"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Region.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["region"] = val

		val, err = v.Status.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["status"] = val

		val, err = v.Tags.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tags"] = val

		val, err = v.ChecksType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ChecksValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ChecksValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ChecksValue) String() string {
	return "ChecksValue"
}

func (v ChecksValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	tagsVal, d := types.ListValue(types.StringType, v.Tags.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"active":              basetypes.BoolType{},
			"created_at":          basetypes.Int64Type{},
			"id":                  basetypes.Int64Type{},
			"interval":            basetypes.Int64Type{},
			"last_downtime_end":   basetypes.Int64Type{},
			"last_downtime_start": basetypes.Int64Type{},
			"modified_at":         basetypes.Int64Type{},
			"name":                basetypes.StringType{},
			"region":              basetypes.StringType{},
			"status":              basetypes.StringType{},
			"tags": basetypes.ListType{
				ElemType: types.StringType,
			},
			"type": basetypes.StringType{},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"active":              basetypes.BoolType{},
			"created_at":          basetypes.Int64Type{},
			"id":                  basetypes.Int64Type{},
			"interval":            basetypes.Int64Type{},
			"last_downtime_end":   basetypes.Int64Type{},
			"last_downtime_start": basetypes.Int64Type{},
			"modified_at":         basetypes.Int64Type{},
			"name":                basetypes.StringType{},
			"region":              basetypes.StringType{},
			"status":              basetypes.StringType{},
			"tags": basetypes.ListType{
				ElemType: types.StringType,
			},
			"type": basetypes.StringType{},
		},
		map[string]attr.Value{
			"active":              v.Active,
			"created_at":          v.CreatedAt,
			"id":                  v.Id,
			"interval":            v.Interval,
			"last_downtime_end":   v.LastDowntimeEnd,
			"last_downtime_start": v.LastDowntimeStart,
			"modified_at":         v.ModifiedAt,
			"name":                v.Name,
			"region":              v.Region,
			"status":              v.Status,
			"tags":                tagsVal,
			"type":                v.ChecksType,
		})

	return objVal, diags
}

func (v ChecksValue) Equal(o attr.Value) bool {
	other, ok := o.(ChecksValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Active.Equal(other.Active) {
		return false
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Interval.Equal(other.Interval) {
		return false
	}

	if !v.LastDowntimeEnd.Equal(other.LastDowntimeEnd) {
		return false
	}

	if !v.LastDowntimeStart.Equal(other.LastDowntimeStart) {
		return false
	}

	if !v.ModifiedAt.Equal(other.ModifiedAt) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Region.Equal(other.Region) {
		return false
	}

	if !v.Status.Equal(other.Status) {
		return false
	}

	if !v.Tags.Equal(other.Tags) {
		return false
	}

	if !v.ChecksType.Equal(other.ChecksType) {
		return false
	}

	return true
}

func (v ChecksValue) Type(ctx context.Context) attr.Type {
	return ChecksType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ChecksValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"active":              basetypes.BoolType{},
		"created_at":          basetypes.Int64Type{},
		"id":                  basetypes.Int64Type{},
		"interval":            basetypes.Int64Type{},
		"last_downtime_end":   basetypes.Int64Type{},
		"last_downtime_start": basetypes.Int64Type{},
		"modified_at":         basetypes.Int64Type{},
		"name":                basetypes.StringType{},
		"region":              basetypes.StringType{},
		"status":              basetypes.StringType{},
		"tags": basetypes.ListType{
			ElemType: types.StringType,
		},
		"type": basetypes.StringType{},
	}
}
