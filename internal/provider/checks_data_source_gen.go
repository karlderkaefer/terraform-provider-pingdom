// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func ChecksDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"checks": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"created": schema.Int64Attribute{
							Computed:            true,
							Description:         "Creating time. Format is UNIX timestamp",
							MarkdownDescription: "Creating time. Format is UNIX timestamp",
						},
						"hostname": schema.StringAttribute{
							Computed:            true,
							Description:         "Target host",
							MarkdownDescription: "Target host",
						},
						"id": schema.Int64Attribute{
							Computed: true,
						},
						"ipv6": schema.BoolAttribute{
							Computed:            true,
							Description:         "Use ipv6 instead of ipv4",
							MarkdownDescription: "Use ipv6 instead of ipv4",
						},
						"lastdownend": schema.Int64Attribute{
							Computed:            true,
							Description:         "Timestamp of end of last check down (if any). Format is UNIX timestamp. During a downtime it will be lasttesttime.",
							MarkdownDescription: "Timestamp of end of last check down (if any). Format is UNIX timestamp. During a downtime it will be lasttesttime.",
						},
						"lastdownstart": schema.Int64Attribute{
							Computed:            true,
							Description:         "Timestamp of start of last check down (if any). Format is UNIX timestamp.",
							MarkdownDescription: "Timestamp of start of last check down (if any). Format is UNIX timestamp.",
						},
						"lasterrortime": schema.Int64Attribute{
							Computed:            true,
							Description:         "Timestamp of last error (if any). Format is UNIX timestamp",
							MarkdownDescription: "Timestamp of last error (if any). Format is UNIX timestamp",
						},
						"lastresponsetime": schema.Int64Attribute{
							Computed:            true,
							Description:         "Response time (in milliseconds) of last test.",
							MarkdownDescription: "Response time (in milliseconds) of last test.",
						},
						"lasttesttime": schema.Int64Attribute{
							Computed:            true,
							Description:         "Timestamp of last test (if any). Format is UNIX timestamp",
							MarkdownDescription: "Timestamp of last test (if any). Format is UNIX timestamp",
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"resolution": schema.Int64Attribute{
							Computed:            true,
							Description:         "How often should the check be tested? (minutes)",
							MarkdownDescription: "How often should the check be tested? (minutes)",
						},
						"status": schema.StringAttribute{
							Computed: true,
						},
						"tags": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"count": schema.Int64Attribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed: true,
									},
								},
								CustomType: TagsType{
									ObjectType: types.ObjectType{
										AttrTypes: TagsValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "List of tags for check",
							MarkdownDescription: "List of tags for check",
						},
					},
					CustomType: ChecksType{
						ObjectType: types.ObjectType{
							AttrTypes: ChecksValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"counts": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"filtered": schema.Int64Attribute{
						Computed:            true,
						Description:         "Number of checks after limit was applied",
						MarkdownDescription: "Number of checks after limit was applied",
					},
					"limited": schema.Int64Attribute{
						Computed:            true,
						Description:         "Number of checks after tags filter was applied",
						MarkdownDescription: "Number of checks after tags filter was applied",
					},
					"total": schema.Int64Attribute{
						Computed:            true,
						Description:         "Total number of checks",
						MarkdownDescription: "Total number of checks",
					},
				},
				CustomType: CountsType{
					ObjectType: types.ObjectType{
						AttrTypes: CountsValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"include_severity": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Include severity level for each check.",
				MarkdownDescription: "Include severity level for each check.",
			},
			"include_tags": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Include tag list for each check. Tags can be marked as \"a\" or \"u\", for auto tagged or user tagged.",
				MarkdownDescription: "Include tag list for each check. Tags can be marked as \"a\" or \"u\", for auto tagged or user tagged.",
			},
			"limit": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Limits the number of returned probes to the specified quantity. (Max value is 25000)",
				MarkdownDescription: "Limits the number of returned probes to the specified quantity. (Max value is 25000)",
			},
			"offset": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Offset for listing. (Requires limit.)",
				MarkdownDescription: "Offset for listing. (Requires limit.)",
			},
			"showencryption": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "If set, show encryption setting for each check",
				MarkdownDescription: "If set, show encryption setting for each check",
			},
			"tags": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Tag list separated by commas. As an example \"nginx,apache\" would filter out all responses except those tagged nginx or apache",
				MarkdownDescription: "Tag list separated by commas. As an example \"nginx,apache\" would filter out all responses except those tagged nginx or apache",
			},
		},
	}
}

type ChecksModel struct {
	Checks          types.List   `tfsdk:"checks"`
	Counts          CountsValue  `tfsdk:"counts"`
	IncludeSeverity types.Bool   `tfsdk:"include_severity"`
	IncludeTags     types.Bool   `tfsdk:"include_tags"`
	Limit           types.Int64  `tfsdk:"limit"`
	Offset          types.Int64  `tfsdk:"offset"`
	Showencryption  types.Bool   `tfsdk:"showencryption"`
	Tags            types.String `tfsdk:"tags"`
}

var _ basetypes.ObjectTypable = ChecksType{}

type ChecksType struct {
	basetypes.ObjectType
}

func (t ChecksType) Equal(o attr.Type) bool {
	other, ok := o.(ChecksType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ChecksType) String() string {
	return "ChecksType"
}

func (t ChecksType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdAttribute, ok := attributes["created"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created is missing from object`)

		return nil, diags
	}

	createdVal, ok := createdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created expected to be basetypes.Int64Value, was: %T`, createdAttribute))
	}

	hostnameAttribute, ok := attributes["hostname"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hostname is missing from object`)

		return nil, diags
	}

	hostnameVal, ok := hostnameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hostname expected to be basetypes.StringValue, was: %T`, hostnameAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	ipv6Attribute, ok := attributes["ipv6"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ipv6 is missing from object`)

		return nil, diags
	}

	ipv6Val, ok := ipv6Attribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ipv6 expected to be basetypes.BoolValue, was: %T`, ipv6Attribute))
	}

	lastdownendAttribute, ok := attributes["lastdownend"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lastdownend is missing from object`)

		return nil, diags
	}

	lastdownendVal, ok := lastdownendAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lastdownend expected to be basetypes.Int64Value, was: %T`, lastdownendAttribute))
	}

	lastdownstartAttribute, ok := attributes["lastdownstart"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lastdownstart is missing from object`)

		return nil, diags
	}

	lastdownstartVal, ok := lastdownstartAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lastdownstart expected to be basetypes.Int64Value, was: %T`, lastdownstartAttribute))
	}

	lasterrortimeAttribute, ok := attributes["lasterrortime"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lasterrortime is missing from object`)

		return nil, diags
	}

	lasterrortimeVal, ok := lasterrortimeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lasterrortime expected to be basetypes.Int64Value, was: %T`, lasterrortimeAttribute))
	}

	lastresponsetimeAttribute, ok := attributes["lastresponsetime"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lastresponsetime is missing from object`)

		return nil, diags
	}

	lastresponsetimeVal, ok := lastresponsetimeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lastresponsetime expected to be basetypes.Int64Value, was: %T`, lastresponsetimeAttribute))
	}

	lasttesttimeAttribute, ok := attributes["lasttesttime"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lasttesttime is missing from object`)

		return nil, diags
	}

	lasttesttimeVal, ok := lasttesttimeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lasttesttime expected to be basetypes.Int64Value, was: %T`, lasttesttimeAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	resolutionAttribute, ok := attributes["resolution"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resolution is missing from object`)

		return nil, diags
	}

	resolutionVal, ok := resolutionAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resolution expected to be basetypes.Int64Value, was: %T`, resolutionAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return nil, diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	tagsAttribute, ok := attributes["tags"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tags is missing from object`)

		return nil, diags
	}

	tagsVal, ok := tagsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tags expected to be basetypes.ListValue, was: %T`, tagsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ChecksValue{
		Created:          createdVal,
		Hostname:         hostnameVal,
		Id:               idVal,
		Ipv6:             ipv6Val,
		Lastdownend:      lastdownendVal,
		Lastdownstart:    lastdownstartVal,
		Lasterrortime:    lasterrortimeVal,
		Lastresponsetime: lastresponsetimeVal,
		Lasttesttime:     lasttesttimeVal,
		Name:             nameVal,
		Resolution:       resolutionVal,
		Status:           statusVal,
		Tags:             tagsVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewChecksValueNull() ChecksValue {
	return ChecksValue{
		state: attr.ValueStateNull,
	}
}

func NewChecksValueUnknown() ChecksValue {
	return ChecksValue{
		state: attr.ValueStateUnknown,
	}
}

func NewChecksValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ChecksValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ChecksValue Attribute Value",
				"While creating a ChecksValue value, a missing attribute value was detected. "+
					"A ChecksValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ChecksValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ChecksValue Attribute Type",
				"While creating a ChecksValue value, an invalid attribute value was detected. "+
					"A ChecksValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ChecksValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ChecksValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ChecksValue Attribute Value",
				"While creating a ChecksValue value, an extra attribute value was detected. "+
					"A ChecksValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ChecksValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewChecksValueUnknown(), diags
	}

	createdAttribute, ok := attributes["created"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	createdVal, ok := createdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created expected to be basetypes.Int64Value, was: %T`, createdAttribute))
	}

	hostnameAttribute, ok := attributes["hostname"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hostname is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	hostnameVal, ok := hostnameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hostname expected to be basetypes.StringValue, was: %T`, hostnameAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	ipv6Attribute, ok := attributes["ipv6"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ipv6 is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	ipv6Val, ok := ipv6Attribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ipv6 expected to be basetypes.BoolValue, was: %T`, ipv6Attribute))
	}

	lastdownendAttribute, ok := attributes["lastdownend"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lastdownend is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	lastdownendVal, ok := lastdownendAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lastdownend expected to be basetypes.Int64Value, was: %T`, lastdownendAttribute))
	}

	lastdownstartAttribute, ok := attributes["lastdownstart"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lastdownstart is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	lastdownstartVal, ok := lastdownstartAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lastdownstart expected to be basetypes.Int64Value, was: %T`, lastdownstartAttribute))
	}

	lasterrortimeAttribute, ok := attributes["lasterrortime"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lasterrortime is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	lasterrortimeVal, ok := lasterrortimeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lasterrortime expected to be basetypes.Int64Value, was: %T`, lasterrortimeAttribute))
	}

	lastresponsetimeAttribute, ok := attributes["lastresponsetime"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lastresponsetime is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	lastresponsetimeVal, ok := lastresponsetimeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lastresponsetime expected to be basetypes.Int64Value, was: %T`, lastresponsetimeAttribute))
	}

	lasttesttimeAttribute, ok := attributes["lasttesttime"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lasttesttime is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	lasttesttimeVal, ok := lasttesttimeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lasttesttime expected to be basetypes.Int64Value, was: %T`, lasttesttimeAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	resolutionAttribute, ok := attributes["resolution"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resolution is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	resolutionVal, ok := resolutionAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resolution expected to be basetypes.Int64Value, was: %T`, resolutionAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	tagsAttribute, ok := attributes["tags"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tags is missing from object`)

		return NewChecksValueUnknown(), diags
	}

	tagsVal, ok := tagsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tags expected to be basetypes.ListValue, was: %T`, tagsAttribute))
	}

	if diags.HasError() {
		return NewChecksValueUnknown(), diags
	}

	return ChecksValue{
		Created:          createdVal,
		Hostname:         hostnameVal,
		Id:               idVal,
		Ipv6:             ipv6Val,
		Lastdownend:      lastdownendVal,
		Lastdownstart:    lastdownstartVal,
		Lasterrortime:    lasterrortimeVal,
		Lastresponsetime: lastresponsetimeVal,
		Lasttesttime:     lasttesttimeVal,
		Name:             nameVal,
		Resolution:       resolutionVal,
		Status:           statusVal,
		Tags:             tagsVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewChecksValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ChecksValue {
	object, diags := NewChecksValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewChecksValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ChecksType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewChecksValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewChecksValueUnknown(), nil
	}

	if in.IsNull() {
		return NewChecksValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewChecksValueMust(ChecksValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ChecksType) ValueType(ctx context.Context) attr.Value {
	return ChecksValue{}
}

var _ basetypes.ObjectValuable = ChecksValue{}

type ChecksValue struct {
	Created          basetypes.Int64Value  `tfsdk:"created"`
	Hostname         basetypes.StringValue `tfsdk:"hostname"`
	Id               basetypes.Int64Value  `tfsdk:"id"`
	Ipv6             basetypes.BoolValue   `tfsdk:"ipv6"`
	Lastdownend      basetypes.Int64Value  `tfsdk:"lastdownend"`
	Lastdownstart    basetypes.Int64Value  `tfsdk:"lastdownstart"`
	Lasterrortime    basetypes.Int64Value  `tfsdk:"lasterrortime"`
	Lastresponsetime basetypes.Int64Value  `tfsdk:"lastresponsetime"`
	Lasttesttime     basetypes.Int64Value  `tfsdk:"lasttesttime"`
	Name             basetypes.StringValue `tfsdk:"name"`
	Resolution       basetypes.Int64Value  `tfsdk:"resolution"`
	Status           basetypes.StringValue `tfsdk:"status"`
	Tags             basetypes.ListValue   `tfsdk:"tags"`
	state            attr.ValueState
}

func (v ChecksValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 13)

	var val tftypes.Value
	var err error

	attrTypes["created"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["hostname"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["ipv6"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["lastdownend"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["lastdownstart"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["lasterrortime"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["lastresponsetime"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["lasttesttime"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["resolution"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tags"] = basetypes.ListType{
		ElemType: TagsValue{}.Type(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 13)

		val, err = v.Created.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created"] = val

		val, err = v.Hostname.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["hostname"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Ipv6.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ipv6"] = val

		val, err = v.Lastdownend.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["lastdownend"] = val

		val, err = v.Lastdownstart.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["lastdownstart"] = val

		val, err = v.Lasterrortime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["lasterrortime"] = val

		val, err = v.Lastresponsetime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["lastresponsetime"] = val

		val, err = v.Lasttesttime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["lasttesttime"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Resolution.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resolution"] = val

		val, err = v.Status.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["status"] = val

		val, err = v.Tags.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tags"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ChecksValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ChecksValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ChecksValue) String() string {
	return "ChecksValue"
}

func (v ChecksValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	tags := types.ListValueMust(
		TagsType{
			basetypes.ObjectType{
				AttrTypes: TagsValue{}.AttributeTypes(ctx),
			},
		},
		v.Tags.Elements(),
	)

	if v.Tags.IsNull() {
		tags = types.ListNull(
			TagsType{
				basetypes.ObjectType{
					AttrTypes: TagsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Tags.IsUnknown() {
		tags = types.ListUnknown(
			TagsType{
				basetypes.ObjectType{
					AttrTypes: TagsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"created":          basetypes.Int64Type{},
			"hostname":         basetypes.StringType{},
			"id":               basetypes.Int64Type{},
			"ipv6":             basetypes.BoolType{},
			"lastdownend":      basetypes.Int64Type{},
			"lastdownstart":    basetypes.Int64Type{},
			"lasterrortime":    basetypes.Int64Type{},
			"lastresponsetime": basetypes.Int64Type{},
			"lasttesttime":     basetypes.Int64Type{},
			"name":             basetypes.StringType{},
			"resolution":       basetypes.Int64Type{},
			"status":           basetypes.StringType{},
			"tags": basetypes.ListType{
				ElemType: TagsValue{}.Type(ctx),
			},
		},
		map[string]attr.Value{
			"created":          v.Created,
			"hostname":         v.Hostname,
			"id":               v.Id,
			"ipv6":             v.Ipv6,
			"lastdownend":      v.Lastdownend,
			"lastdownstart":    v.Lastdownstart,
			"lasterrortime":    v.Lasterrortime,
			"lastresponsetime": v.Lastresponsetime,
			"lasttesttime":     v.Lasttesttime,
			"name":             v.Name,
			"resolution":       v.Resolution,
			"status":           v.Status,
			"tags":             tags,
		})

	return objVal, diags
}

func (v ChecksValue) Equal(o attr.Value) bool {
	other, ok := o.(ChecksValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Created.Equal(other.Created) {
		return false
	}

	if !v.Hostname.Equal(other.Hostname) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Ipv6.Equal(other.Ipv6) {
		return false
	}

	if !v.Lastdownend.Equal(other.Lastdownend) {
		return false
	}

	if !v.Lastdownstart.Equal(other.Lastdownstart) {
		return false
	}

	if !v.Lasterrortime.Equal(other.Lasterrortime) {
		return false
	}

	if !v.Lastresponsetime.Equal(other.Lastresponsetime) {
		return false
	}

	if !v.Lasttesttime.Equal(other.Lasttesttime) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Resolution.Equal(other.Resolution) {
		return false
	}

	if !v.Status.Equal(other.Status) {
		return false
	}

	if !v.Tags.Equal(other.Tags) {
		return false
	}

	return true
}

func (v ChecksValue) Type(ctx context.Context) attr.Type {
	return ChecksType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ChecksValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created":          basetypes.Int64Type{},
		"hostname":         basetypes.StringType{},
		"id":               basetypes.Int64Type{},
		"ipv6":             basetypes.BoolType{},
		"lastdownend":      basetypes.Int64Type{},
		"lastdownstart":    basetypes.Int64Type{},
		"lasterrortime":    basetypes.Int64Type{},
		"lastresponsetime": basetypes.Int64Type{},
		"lasttesttime":     basetypes.Int64Type{},
		"name":             basetypes.StringType{},
		"resolution":       basetypes.Int64Type{},
		"status":           basetypes.StringType{},
		"tags": basetypes.ListType{
			ElemType: TagsValue{}.Type(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = TagsType{}

type TagsType struct {
	basetypes.ObjectType
}

func (t TagsType) Equal(o attr.Type) bool {
	other, ok := o.(TagsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TagsType) String() string {
	return "TagsType"
}

func (t TagsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	countAttribute, ok := attributes["count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`count is missing from object`)

		return nil, diags
	}

	countVal, ok := countAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`count expected to be basetypes.Int64Value, was: %T`, countAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TagsValue{
		Count:    countVal,
		Name:     nameVal,
		TagsType: typeVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewTagsValueNull() TagsValue {
	return TagsValue{
		state: attr.ValueStateNull,
	}
}

func NewTagsValueUnknown() TagsValue {
	return TagsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTagsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TagsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TagsValue Attribute Value",
				"While creating a TagsValue value, a missing attribute value was detected. "+
					"A TagsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TagsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TagsValue Attribute Type",
				"While creating a TagsValue value, an invalid attribute value was detected. "+
					"A TagsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TagsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TagsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TagsValue Attribute Value",
				"While creating a TagsValue value, an extra attribute value was detected. "+
					"A TagsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TagsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTagsValueUnknown(), diags
	}

	countAttribute, ok := attributes["count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`count is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	countVal, ok := countAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`count expected to be basetypes.Int64Value, was: %T`, countAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewTagsValueUnknown(), diags
	}

	return TagsValue{
		Count:    countVal,
		Name:     nameVal,
		TagsType: typeVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewTagsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TagsValue {
	object, diags := NewTagsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTagsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TagsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTagsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTagsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTagsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTagsValueMust(TagsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TagsType) ValueType(ctx context.Context) attr.Value {
	return TagsValue{}
}

var _ basetypes.ObjectValuable = TagsValue{}

type TagsValue struct {
	Count    basetypes.Int64Value  `tfsdk:"count"`
	Name     basetypes.StringValue `tfsdk:"name"`
	TagsType basetypes.StringValue `tfsdk:"type"`
	state    attr.ValueState
}

func (v TagsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Count.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["count"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.TagsType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TagsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TagsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TagsValue) String() string {
	return "TagsValue"
}

func (v TagsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"count": basetypes.Int64Type{},
			"name":  basetypes.StringType{},
			"type":  basetypes.StringType{},
		},
		map[string]attr.Value{
			"count": v.Count,
			"name":  v.Name,
			"type":  v.TagsType,
		})

	return objVal, diags
}

func (v TagsValue) Equal(o attr.Value) bool {
	other, ok := o.(TagsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Count.Equal(other.Count) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.TagsType.Equal(other.TagsType) {
		return false
	}

	return true
}

func (v TagsValue) Type(ctx context.Context) attr.Type {
	return TagsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TagsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"count": basetypes.Int64Type{},
		"name":  basetypes.StringType{},
		"type":  basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = CountsType{}

type CountsType struct {
	basetypes.ObjectType
}

func (t CountsType) Equal(o attr.Type) bool {
	other, ok := o.(CountsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CountsType) String() string {
	return "CountsType"
}

func (t CountsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	filteredAttribute, ok := attributes["filtered"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`filtered is missing from object`)

		return nil, diags
	}

	filteredVal, ok := filteredAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`filtered expected to be basetypes.Int64Value, was: %T`, filteredAttribute))
	}

	limitedAttribute, ok := attributes["limited"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`limited is missing from object`)

		return nil, diags
	}

	limitedVal, ok := limitedAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`limited expected to be basetypes.Int64Value, was: %T`, limitedAttribute))
	}

	totalAttribute, ok := attributes["total"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`total is missing from object`)

		return nil, diags
	}

	totalVal, ok := totalAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`total expected to be basetypes.Int64Value, was: %T`, totalAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CountsValue{
		Filtered: filteredVal,
		Limited:  limitedVal,
		Total:    totalVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewCountsValueNull() CountsValue {
	return CountsValue{
		state: attr.ValueStateNull,
	}
}

func NewCountsValueUnknown() CountsValue {
	return CountsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCountsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CountsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CountsValue Attribute Value",
				"While creating a CountsValue value, a missing attribute value was detected. "+
					"A CountsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CountsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CountsValue Attribute Type",
				"While creating a CountsValue value, an invalid attribute value was detected. "+
					"A CountsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CountsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CountsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CountsValue Attribute Value",
				"While creating a CountsValue value, an extra attribute value was detected. "+
					"A CountsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CountsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCountsValueUnknown(), diags
	}

	filteredAttribute, ok := attributes["filtered"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`filtered is missing from object`)

		return NewCountsValueUnknown(), diags
	}

	filteredVal, ok := filteredAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`filtered expected to be basetypes.Int64Value, was: %T`, filteredAttribute))
	}

	limitedAttribute, ok := attributes["limited"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`limited is missing from object`)

		return NewCountsValueUnknown(), diags
	}

	limitedVal, ok := limitedAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`limited expected to be basetypes.Int64Value, was: %T`, limitedAttribute))
	}

	totalAttribute, ok := attributes["total"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`total is missing from object`)

		return NewCountsValueUnknown(), diags
	}

	totalVal, ok := totalAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`total expected to be basetypes.Int64Value, was: %T`, totalAttribute))
	}

	if diags.HasError() {
		return NewCountsValueUnknown(), diags
	}

	return CountsValue{
		Filtered: filteredVal,
		Limited:  limitedVal,
		Total:    totalVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewCountsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CountsValue {
	object, diags := NewCountsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCountsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CountsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCountsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCountsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCountsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCountsValueMust(CountsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CountsType) ValueType(ctx context.Context) attr.Value {
	return CountsValue{}
}

var _ basetypes.ObjectValuable = CountsValue{}

type CountsValue struct {
	Filtered basetypes.Int64Value `tfsdk:"filtered"`
	Limited  basetypes.Int64Value `tfsdk:"limited"`
	Total    basetypes.Int64Value `tfsdk:"total"`
	state    attr.ValueState
}

func (v CountsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["filtered"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["limited"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["total"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Filtered.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["filtered"] = val

		val, err = v.Limited.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["limited"] = val

		val, err = v.Total.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["total"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CountsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CountsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CountsValue) String() string {
	return "CountsValue"
}

func (v CountsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"filtered": basetypes.Int64Type{},
			"limited":  basetypes.Int64Type{},
			"total":    basetypes.Int64Type{},
		},
		map[string]attr.Value{
			"filtered": v.Filtered,
			"limited":  v.Limited,
			"total":    v.Total,
		})

	return objVal, diags
}

func (v CountsValue) Equal(o attr.Value) bool {
	other, ok := o.(CountsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Filtered.Equal(other.Filtered) {
		return false
	}

	if !v.Limited.Equal(other.Limited) {
		return false
	}

	if !v.Total.Equal(other.Total) {
		return false
	}

	return true
}

func (v CountsValue) Type(ctx context.Context) attr.Type {
	return CountsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CountsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"filtered": basetypes.Int64Type{},
		"limited":  basetypes.Int64Type{},
		"total":    basetypes.Int64Type{},
	}
}
